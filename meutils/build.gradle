plugins {
    id 'com.android.library'
    id 'maven-publish' // 导入 maven-publish 插件
}


android {
    compileSdkVersion rootProject.ext.compileSdkVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName

        //会合并到app的混淆规则中，是给包括app在内的其他模块调用时使用的混淆规则
        consumerProguardFiles "consumer-rules.pro"
    }

    buildFeatures {
        viewBinding = true
    }

    buildTypes {
        release {
            minifyEnabled true
            //给Library模块自己使用的混淆规则
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        // 剔除这个包下的所有文件（不会移除相关签名信息）
        exclude 'META-INF/*******'
    }
}

//maven-publish插件配置信息
afterEvaluate {
    // 排除 BuildConfig.class 和 R.class
    generateReleaseBuildConfig.enabled = false
    generateDebugBuildConfig.enabled = false
    generateReleaseResValues.enabled = false
    generateDebugResValues.enabled = false

    publishing {
        publications {
            release(MavenPublication) {
                from components.release

                //以github仓库tag为主，这里配置的都不会生效
                groupId = 'com.github.hepingdev'
                artifactId = 'MeUtils'
                version = '0.0.5-alpha'
            }

            debug(MavenPublication) {
                from components.debug

                groupId = 'com.github.hepingdev'
                artifactId = 'MeUtils'
                version = '0.0.5-alpha'
            }
        }
    }
}

dependencies {
    //android library
    api "androidx.appcompat:appcompat:${rootProject.ext.appcompat}"
    api "com.google.android.material:material:${rootProject.ext.material}"
    api "androidx.recyclerview:recyclerview:${rootProject.ext.recyclerview}"
    api "androidx.constraintlayout:constraintlayout:${rootProject.ext.constraintlayout}"
    api "androidx.cardview:cardview:${rootProject.ext.cardview}"
    api "androidx.viewpager2:viewpager2:${rootProject.ext.viewPager2}"
//    api "androidx.multidex:multidex:${rootProject.ext.multidex}"
    // optional - ProcessLifecycleOwner provides a lifecycle for the whole application process
    api "androidx.lifecycle:lifecycle-process:${rootProject.ext.lifecycle_version}"

    //kotlin
//    api "androidx.core:core:${rootProject.ext.kotlin_core_ktx}"
//    api "androidx.core:core-ktx:${rootProject.ext.kotlin_core_ktx}"
//    api "org.jetbrains.kotlin:kotlin-stdlib-jdk7:${rootProject.ext.kotlin_version}"

    //other library
    api "com.github.bumptech.glide:glide:${rootProject.ext.glide}"
    annotationProcessor "com.github.bumptech.glide:compiler:${rootProject.ext.glide}"
    api "com.github.getActivity:XXPermissions:${rootProject.ext.permissions}"
    api "com.github.getActivity:ToastUtils:${rootProject.ext.toast}"
    api "com.github.getActivity:EasyHttp:${rootProject.ext.easyhttp}"
//    api "me.jessyan:autosize:${rootProject.ext.androidAutoSize}"
    api "com.github.CymChad:BaseRecyclerViewAdapterHelper:${rootProject.ext.recyclerviewAdapterHelper}"
    api "de.hdodenhof:circleimageview:3.1.0"
}
